// RUTA: shared/utils/src/lib/search/keyword-normalizer.ts
/**
 * @file keyword-normalizer.ts
 * @description Utilidad pura y atómica para normalizar palabras clave.
 * @version 2.0.0 (Dependency Purge)
 * @author RaZ Podestá - MetaShark Tech
 */
import pluralize from "pluralize";

// El logger ha sido eliminado para cumplir con la jerarquía arquitectónica.

const STOP_WORDS: ReadonlySet<string> = new Set([
  "a",
  "an",
  "the",
  "and",
  "or",
  "but",
  "about",
  "above",
  "after",
  "again",
  "against",
  "all",
  "am",
  "is",
  "are",
  "as",
  "at",
  "be",
  "because",
  "been",
  "before",
  "being",
  "below",
  "between",
  "both",
  "by",
  "can",
  "could",
  "did",
  "do",
  "does",
  "doing",
  "down",
  "during",
  "each",
  "few",
  "for",
  "from",
  "further",
  "had",
  "has",
  "have",
  "having",
  "he",
  "her",
  "here",
  "hers",
  "him",
  "his",
  "how",
  "i",
  "if",
  "in",
  "into",
  "it",
  "its",
  "just",
  "me",
  "more",
  "most",
  "my",
  "no",
  "nor",
  "not",
  "of",
  "off",
  "on",
  "once",
  "only",
  "or",
  "other",
  "our",
  "out",
  "over",
  "own",
  "s",
  "same",
  "she",
  "should",
  "so",
  "some",
  "such",
  "t",
  "than",
  "that",
  "then",
  "there",
  "these",
  "they",
  "this",
  "those",
  "through",
  "to",
  "too",
  "under",
  "until",
  "up",
  "very",
  "was",
  "we",
  "were",
  "what",
  "when",
  "where",
  "which",
  "while",
  "who",
  "whom",
  "why",
  "with",
  "you",
  "your",

  // Italian stop words
  "il",
  "la",
  "lo",
  "i",
  "gli",
  "le",
  "un",
  "una",
  "uno",
  "di",
  "a",
  "da",
  "in",
  "con",
  "su",
  "per",
  "tra",
  "fra",
  "e",
  "o",
  "ma",
  "se",
  "che",
  "chi",
  "cosa",
  "dove",
  "come",
  "quando",
  "perché",
  "non",
  "mi",
  "ti",
  "ci",
  "vi",
  "si",
  "ne",
  "lo",
  "la",
  "li",
  "le",
  "gli",
  "cui",
  "c'è",
  "c'era",
  "c'erano",
  "c'è stato",
  "c'è stata",
  "c'è stati",
  "c'è state",
]);

/**
 * @function normalizeKeywords
 * @description Procesa un array de palabras clave para optimizarlas para la búsqueda.
 *              - Convierte todas las palabras a minúsculas.
 *              - Elimina "stop words" (palabras de relleno).
 *              - Singulariza las palabras para manejar variaciones de plural/singular.
 *              - Elimina duplicados.
 *              - Filtra palabras vacías o solo espacios.
 * @param {string[]} keywords El array de palabras clave a normalizar.
 * @returns {string[]} Un nuevo array de palabras clave normalizadas.
 */
export function normalizeKeywords(keywords: string[]): string[] {
  const normalized = keywords
    .map((keyword) => keyword.trim().toLowerCase()) // Eliminar espacios y convertir a minúsculas
    .filter((keyword) => keyword.length > 0) // Eliminar cadenas vacías
    .filter((keyword) => !STOP_WORDS.has(keyword)) // Filtrar "stop words"
    .map((keyword) => pluralize.singular(keyword)); // Singularizar

  const uniqueKeywords = Array.from(new Set(normalized)); // Eliminar duplicados

  return uniqueKeywords;
}
